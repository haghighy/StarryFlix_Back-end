// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StarryFlix.Models.Databases;

#nullable disable

namespace StarryFlix.Migrations
{
    [DbContext(typeof(StarryFlixContext))]
    partial class StarryFlixContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StarryFlix.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartWorkTime")
                        .HasColumnType("date");

                    b.HasKey("Id")
                        .HasName("PK_Director");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("StarryFlix.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int")
                        .HasColumnName("Director_Id");

                    b.Property<byte[]>("Duration")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("StarryFlix.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StarryFlix.Models.Watcher", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Watcher");

                    b.ToTable("Watchers");
                });

            modelBuilder.Entity("StarryFlix.Models.Director", b =>
                {
                    b.HasOne("StarryFlix.Models.User", "User")
                        .WithOne("Director")
                        .HasForeignKey("StarryFlix.Models.Director", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Directors_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StarryFlix.Models.Movie", b =>
                {
                    b.HasOne("StarryFlix.Models.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .HasConstraintName("FK_Movies_Directors");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("StarryFlix.Models.Watcher", b =>
                {
                    b.HasOne("StarryFlix.Models.User", "User")
                        .WithOne("Watcher")
                        .HasForeignKey("StarryFlix.Models.Watcher", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Watchers_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StarryFlix.Models.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("StarryFlix.Models.User", b =>
                {
                    b.Navigation("Director");

                    b.Navigation("Watcher");
                });
#pragma warning restore 612, 618
        }
    }
}
